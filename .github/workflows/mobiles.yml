name: Run Mobiles Script

on:
  schedule:
    # Run every Saturday at 12 AM IST (6:30 PM UTC on Friday)
    - cron: '30 18 * * 5'
  
  # Allow manual trigger
  workflow_dispatch:

jobs:
  update-mobiles-data:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper git operations
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install selenium
          pip install webdriver-manager
          pip install requests  # For potential fallback methods
      
      - name: Install Chrome and ChromeDriver
        run: |
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
      
      - name: Check existing data
        id: check_data
        run: |
          if [ -f "mobiles.json" ]; then
            echo "Existing mobiles.json found"
            PRODUCT_COUNT=$(python -c "import json; f=open('mobiles.json'); data=json.load(f); print(len(data.get('products', [])))")
            echo "Found $PRODUCT_COUNT products in existing file"
            echo "product_count=$PRODUCT_COUNT" >> $GITHUB_OUTPUT
          else
            echo "No existing mobiles.json found"
            echo "product_count=0" >> $GITHUB_OUTPUT
          fi
      
      - name: Run mobiles.py script
        id: run_script
        continue-on-error: true  # Continue even if the script fails
        run: |
          python mobiles.py
          echo "script_exit_code=$?" >> $GITHUB_OUTPUT
      
      - name: Check script results
        id: check_results
        run: |
          if [ -f "mobiles.json" ]; then
            NEW_COUNT=$(python -c "import json; f=open('mobiles.json'); data=json.load(f); print(len(data.get('products', [])))")
            echo "Found $NEW_COUNT products after running script"
            echo "new_count=$NEW_COUNT" >> $GITHUB_OUTPUT
            
            if [ "$NEW_COUNT" -gt "10" ]; then
              echo "Sufficient products found, proceeding with commit"
              echo "should_commit=true" >> $GITHUB_OUTPUT
            else
              echo "Insufficient products found"
              echo "should_commit=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "No mobiles.json file found after script execution"
            echo "should_commit=false" >> $GITHUB_OUTPUT
            echo "new_count=0" >> $GITHUB_OUTPUT
          fi
      
      - name: Commit and push if changes
        if: steps.check_results.outputs.should_commit == 'true'
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          git add mobiles.json
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update mobiles.json data [automated]" && git push)
          echo "Successfully committed and pushed changes"
      
      - name: Upload debug screenshot
        if: steps.run_script.outputs.script_exit_code != '0'
        uses: actions/upload-artifact@v2
        with:
          name: debug-screenshot
          path: debug_screenshot.png
          if-no-files-found: ignore
      
      - name: Report status
        run: |
          echo "Script exit code: ${{ steps.run_script.outputs.script_exit_code }}"
          echo "Previous product count: ${{ steps.check_data.outputs.product_count }}"
          echo "New product count: ${{ steps.check_results.outputs.new_count }}"
          
          if [ "${{ steps.check_results.outputs.should_commit }}" == "true" ]; then
            echo "Data was successfully updated"
            exit 0
          elif [ "${{ steps.check_data.outputs.product_count }}" -gt "10" ]; then
            echo "Using existing data as fallback"
            exit 0
          else
            echo "Failed to update data and no valid fallback available"
            exit 1
          fi