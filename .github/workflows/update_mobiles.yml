name: Run Update Mobiles Script with Time Management

on:
  schedule:
    # Run every day at 1 AM IST (7:30 PM UTC previous day)
    - cron: '30 19 * * *'
    # Run every day at 9 AM IST (3:30 AM UTC same day)
    - cron: '30 3 * * *'
    # Run every day at 5 PM IST (11:30 AM UTC same day)
    - cron: '30 11 * * *'
  
  # Allow manual trigger
  workflow_dispatch:

jobs:
  update-mobiles-data:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}
      
      - name: Read time configuration
        id: time_config
        run: |
          if [ -f "time.json" ]; then
            TIME_VALUE=$(jq -r '.[0].time' time.json)
            GRACE_VALUE=$(jq -r '.[0].grace // "00:05"' time.json)
            echo "time_limit=${TIME_VALUE}" >> $GITHUB_OUTPUT
            echo "grace_period=${GRACE_VALUE}" >> $GITHUB_OUTPUT
            echo "⏱️  Time limit loaded from time.json: ${TIME_VALUE}"
            echo "⏱️  Grace period loaded from time.json: ${GRACE_VALUE}"
          else
            echo "time_limit=05:00" >> $GITHUB_OUTPUT
            echo "grace_period=00:05" >> $GITHUB_OUTPUT
            echo "⚠️  time.json not found, using defaults: time=05:00, grace=00:05"
          fi
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install selenium
          pip install webdriver-manager
          pip install pillow
          pip install requests
      
      - name: Install Chrome & Chromedriver
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable
          install-chromedriver: true
      
      - name: Run update_mobiles.py script with time management
        id: run_script
        run: |
          echo "🚀 Starting update_mobiles.py with time limit: ${{ steps.time_config.outputs.time_limit }}"
          echo "⏱️  Grace period: ${{ steps.time_config.outputs.grace_period }}"
          echo "⏱️  Workflow started at: $(date)"
          
          # Run the script with time management
          python update_mobiles.py
          
          echo "✅ Script completed at: $(date)"
          
          # Check if files were updated
          if [ -f "update_mobiles.json" ]; then
            echo "files_updated=true" >> $GITHUB_OUTPUT
          else
            echo "files_updated=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create execution summary
        if: always()
        run: |
          echo "📊 WORKFLOW EXECUTION SUMMARY"
          echo "=================================================="
          echo "⏱️  Time Limit: ${{ steps.time_config.outputs.time_limit }}"
          echo "⏱️  Grace Period: ${{ steps.time_config.outputs.grace_period }}"
          echo "🗓️  Execution Date: $(date)"
          echo "💾 Files Updated: ${{ steps.run_script.outputs.files_updated }}"
          echo "🔄 Workflow Status: ${{ job.status }}"
          
          # Show file sizes if they exist
          if [ -f "update_mobiles.json" ]; then
            echo "📄 update_mobiles.json size: $(du -h update_mobiles.json | cut -f1)"
          fi
          
          if [ -f "mobiles.json" ]; then
            echo "📄 mobiles.json size: $(du -h mobiles.json | cut -f1)"
          fi
          
          if [ -d "images" ]; then
            echo "📁 images folder size: $(du -hs images | cut -f1)"
          fi
          
          echo "=================================================="
      
      - name: Commit and push changes (with time management)
        if: always()
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          
          # Add files only if they exist
          files_added=false
          if [ -f update_mobiles.json ]; then 
            git add update_mobiles.json
            files_added=true
            echo "✅ Added update_mobiles.json"
          fi
          if [ -f mobiles.json ]; then 
            git add mobiles.json
            files_added=true
            echo "✅ Added mobiles.json"
          fi
          if [ -d images ]; then 
            git add images/
            files_added=true
            echo "✅ Added images directory"
          fi
          
          # Check if there are any changes to commit
          if git diff --quiet && git diff --staged --quiet; then
            echo "💾 No changes to commit"
          else
            # Determine commit message based on time limit status
            time_limit="${{ steps.time_config.outputs.time_limit }}"
            grace_period="${{ steps.time_config.outputs.grace_period }}"
            
            # Create appropriate commit message
            if [ "${{ steps.run_script.outputs.files_updated }}" = "true" ]; then
              if [ "${{ job.status }}" = "success" ]; then
                commit_msg="Update mobiles data [automated] - Time: ${time_limit}, Grace: ${grace_period}"
              else
                commit_msg="Update mobiles data [automated] - Partial update - Time: ${time_limit}, Grace: ${grace_period}"
              fi
            else
              commit_msg="Update mobiles data [automated] - No changes needed - Time: ${time_limit}, Grace: ${grace_period}"
            fi
            
            git commit -m "${commit_msg}"
            echo "✅ Committed with message: ${commit_msg}"
            
            # Set the remote URL with PAT for authentication
            git remote set-url origin https://${{ secrets.PAT_TOKEN }}@github.com/affdeals/affdeals.github.io.git
            git push
            echo "✅ Changes pushed to repository"
          fi